---
title: "Homework 4, Prioritizing Potential Aquaculture"
author: "Eva Newby"
format: html
execute: 
  warning: false
  error: false
editor: visual
editor_options: 
  chunk_output_type: console
---

#### Link to Homework 4 Description: https://eds-223-geospatial.github.io/assignments/HW4.html

Species of choice- Common cuttlefish (Sepia officinalis) https://www.sealifebase.ca/summary/Sepia-officinalis.html

```{r}
# Load Packages
library(tidyverse)
library(tmap)
library(sf)
library(here)
library(terra)
library(kableExtra)
library(ggspatial)
```

## Prepare Data

```{r}
# Read in shapefile for the West Coast EEZ
eez <- st_read(here("data", "wc_regions_clean[1].shp"))%>%
  st_transform("EPSG:4326")
```

```{r}
# Read in bathymetry raster
depth <- terra::rast(here("data", "depth[1].tif"))%>%
  terra::project("EPSG:4326")
```

```{r}
# Read in SST rasters
# Create list of all SST .tif files 
sst_path = here("data")

sst_files <- list.files(sst_path, 
                        pattern = glob2rx("*average_annual_sst_*.tif$"),
                        full.names = TRUE)
# Create a raster stack 
sst <- terra::rast(sst_files)%>%
  terra::project("EPSG:4326")
```

```{r}
# Remove unnecessary data
rm(sst_files, sst_path)
```

```{r}
# Check CRS' and transform to match
print(st_crs(depth))
print(st_crs(eez))
print(st_crs(sst))
```

## Process data

```{r}
# View rasters to see what we are working with
plot(sst)
plot(eez)
plot(depth)
```

```{r}
# Find the mean SST from 2008-2012 (e.g. create single raster of average SST)
avg_sst <- mean(sst)

# Plot to check
plot(avg_sst)
```

```{r}
# Convert average SST from Kelvin to Celsius (hint: subtract by 273.15)
avg_sst_c <- avg_sst - 273.15

# Verify update
avg_sst_c
```

```{r}
# Crop depth raster to match the extent of the SST raster
depth <- crop(x = depth, y = avg_sst_c)

# View the plot
plot(depth)
```

```{r}
# Remove unnecessary data
rm(avg_sst)
```

```{r}
# Resample the depth data to match the resolution of the SST data using the nearest neighbor approach
depth <- resample(depth,
                  avg_sst_c,
                  method = "near")
                  
```

```{r}
# Check that the depth and SST match in resolution, extent, and coordinate reference system
cat("Do the extents match?",
    terra::ext(avg_sst_c) == terra::ext(depth),
    "\nDo the resolutions match?",
    terra::res(avg_sst_c) == terra::res(depth),
    "\n Do the CRS' match?",
    terra::crs(avg_sst_c) == terra::crs(depth))
```

### Find suitable locations for Oysters

```{r}
# reclassify SST and depth data into locations that are suitable for oysters
sst_reclass <- matrix(c(-Inf, 11, 0,
                        11, 30, 1,
                        30, Inf, 0),
                      ncol = 3,
                      byrow= TRUE)

depth_reclass <- matrix(c(-Inf, 0, 0,
                        0, 70, 1,
                        70, Inf, 0),
                      ncol = 3,
                      byrow= TRUE)
```

```{r}
# Apply matrices to reclassify depth and sst rasters for Oyster suitability
optimal_sst <- classify(avg_sst_c,
                        rcl = sst_reclass)

optimal_depth <- classify(depth,
                        rcl = depth_reclass)
```

```{r}
# Remove unnecessary data
rm(sst_reclass, depth_reclass)
```

```{r}
# Find locations that satisfy both SST and depth conditions

optimal_fun <- function(sst, depth) {
  sst * depth # Use map algebra multiplication
    }

optimal_locs_sst_depth <- lapp(c(optimal_sst, optimal_depth), fun = optimal_fun)

# Plot optimal locations
plot(optimal_locs_sst_depth)
```

### Determine the most suitable EEZ for Oysters

```{r}
# Select suitable cells within West Coast EEZs, using `mask()` within cellSize()

optimal_locs_mask <- cellSize(x = optimal_locs_sst_depth, # area of cells
                              mask = TRUE,
                              unit = 'km',
                              transform = TRUE)

# Plot to view the mask
plot(optimal_locs_mask)
  
```

```{r}
# Find the total suitable area within each EEZ
# Rasterize wc_regions data
eez_raster <- rasterize(x = eez,
                        y = optimal_locs_mask,
                        field = 'rgn')

# View raster to confirm change
plot(eez_raster)
```

```{r}
# Total suitable area can be found with zonal function from terra. 
optimal_locs_eez <- zonal(x = optimal_locs_mask,
                           z = eez_raster,
                           fun = "sum",
                           na.rm = TRUE)
```

```{r}
# Present outputs in a table
optimal_order <- optimal_locs_eez[order(optimal_locs_eez$area, decreasing = TRUE),]

optimal_order %>% 
  kable(caption = "Total Suitable Area Within Each EEZ")
```

```{r}
# To get the total suitable area into a SpatRaster, add the geometry back in the eez data frame using a left join

optimal_eez_total <- left_join(eez, optimal_order, by = 'rgn')
```

#### Visualize our results

```{r}
total_area_plot <- ggplot()+
  geom_sf(data = optimal_eez_total, aes(fill = area)) +
  scale_fill_distiller(palette = "GnBu",
                       direction = 1) +
  coord_sf()+
  annotation_scale(plot_unit = 'km',
                   location = 'bl')+
  annotation_north_arrow(location = "tl",
                         which_north = "true",
                         height = unit(0.7, "cm"),
                         width = unit(0.5, "cm"))+
  labs(title = "Total Suitable Area for Oyster Aquaculture along the West Coast",
       subtitle = "per Exclusive Economic Zones (EEZ)",
       x = "Longitude",
       y = "Latitude",
       fill = bquote("Suitable Area (km"^{2}~")" ))+
  theme_classic()

total_area_plot

```


## Now, let's look at the Common cuttlefish (*Sepia officinalis*)

```{r}
# Create a function so we don't need to repeat steps

optimal_map_function <- function(min_temp, max_temp, min_depth, max_depth, species_name) {
 # ======= Find suitable locations =======
  
 # ------ Classification Matrices ------ #
  # Reclassification matrix for temperature
    sst_matrix <- matrix(c(-Inf, min_temp, NA, 
                         min_temp, max_temp, 1, 
                         max_temp, Inf, NA), 
                       ncol = 3, 
                       byrow = TRUE)
    
  # Reclassification matrix for depth
    depth_matrix <- matrix(c(-Inf, min_depth, NA, 
                           min_depth, max_depth, 1, 
                           max_depth, Inf, NA), 
                         ncol = 3, 
                         byrow = TRUE)
    
# ------ Reclassify ----- #
    optimal_temps <- classify(avg_sst_c, rcl = sst_matrix)
    
    optimal_depths <- classify(depth, rcl = depth_matrix)
    
  # Create a function to multiply cell values
  optimal_funcion <- function(sst, depth) {
    return(sst * depth)
  }
    
  # Apply function to reclassified rasters to find optimal locations  
  optimal_locs <- lapp(c(optimal_temps, optimal_depths),
                          fun = optimal_map_function)
  
# ====== Calculate suitable area ======
  # Area of raster cells
  optimal_locs_mask <- cellSize(x = suitable_locations, 
                             mask = TRUE, 
                             unit = "km", 
                             transform = TRUE) 
  
  # rasterize eez data
  eez_raster <- rasterize(x = wc_regions,
            y = optimal_locs,
            field = 'rgn')
   
# ------ Find total suitable area ----- #  
  # Total suitable area within each eez 
  optimal_locs_total <- zonal(x = optimal_locs_mask,
                           z = eez_raster,
                           fun = "sum",
                           na.rm = TRUE) 
   
   
# ------ Plot ----- #    
   
   
   
   
   
   
}
```

```{r}
# Testing on the Common cuttlefish ecology data
optimal_map_function(min_temp = 10, max_temp = 30,
                   min_depth = 0, max_depth = 50, 
                   species_name = "Common cuttlefish")
```

